name: Build Release

on:
  workflow_dispatch:  # GitHub ActionÈ°µÈù¢ÊâãÂä®Ëß¶Âèë
  push:
    tags:
      - 'v*.*.*'  # TAGÊó∂Ëß¶Âèë, git tag v0.2.1; git push origin v0.2.1

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ytdlp: bin/yt-dlp-linux
            ffmpeg: bin/ffmpeg-linux
            ffprobe: bin/ffprobe-linux
            artifact_name: re-sourcer-linux-x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            ytdlp: bin/yt-dlp-macos
            ffmpeg: bin/ffmpeg-macos
            ffprobe: bin/ffprobe-macos
            artifact_name: re-sourcer-macos-aarch64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ytdlp: bin/yt-dlp-windows.exe
            ffmpeg: bin/ffmpeg-windows.exe
            ffprobe: bin/ffprobe-windows.exe
            artifact_name: re-sourcer-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Verify required binaries exist
        shell: bash
        run: |
          # È™åËØÅ yt-dlp
          if [ ! -f "${{ matrix.platform.ytdlp }}" ]; then
            echo "‚ùå yt-dlp binary not found: ${{ matrix.platform.ytdlp }}"
            exit 1
          fi
          echo "‚úÖ Found yt-dlp binary: ${{ matrix.platform.ytdlp }}"

          # È™åËØÅ ffmpeg
          if [ ! -f "${{ matrix.platform.ffmpeg }}" ]; then
            echo "‚ùå ffmpeg binary not found: ${{ matrix.platform.ffmpeg }}"
            exit 1
          fi
          echo "‚úÖ Found ffmpeg binary: ${{ matrix.platform.ffmpeg }}"

          # È™åËØÅ ffprobe
          if [ ! -f "${{ matrix.platform.ffprobe }}" ]; then
            echo "‚ùå ffprobe binary not found: ${{ matrix.platform.ffprobe }}"
            exit 1
          fi
          echo "‚úÖ Found ffprobe binary: ${{ matrix.platform.ffprobe }}"

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Rename binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mv target/${{ matrix.platform.target }}/release/re-sourcer ${{ matrix.platform.artifact_name }}
          chmod +x ${{ matrix.platform.artifact_name }}

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mv target/${{ matrix.platform.target }}/release/re-sourcer.exe ${{ matrix.platform.artifact_name }}

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: ${{ matrix.platform.artifact_name }}
          retention-days: 7

  build-tauri:
    name: Build Tauri App ${{ matrix.platform.target }}
    needs: build
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cli_artifact: re-sourcer-linux-x86_64
            tauri_artifact: resourcer-tray-linux

          - os: macos-latest
            target: aarch64-apple-darwin
            cli_artifact: re-sourcer-macos-aarch64
            tauri_artifact: resourcer-tray-macos

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            cli_artifact: re-sourcer-windows-x86_64.exe
            tauri_artifact: resourcer-tray-windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform.cli_artifact }}
          path: tray/src-tauri/bin/

      - name: Rename CLI binary for Tauri (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd tray/src-tauri/bin/
          mv ${{ matrix.platform.cli_artifact }} re-sourcer-${{ matrix.platform.target }}
          chmod +x re-sourcer-${{ matrix.platform.target }}
          ls -lh

      - name: Rename CLI binary for Tauri (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cd tray/src-tauri/bin/
          mv ${{ matrix.platform.cli_artifact }} re-sourcer-${{ matrix.platform.target }}.exe
          ls -lh

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install Tauri dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Create dist directory with placeholder
        working-directory: tray
        shell: bash
        run: |
          mkdir -p dist
          cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <title>ReSourcer</title>
          </head>
          <body>
              <h1>ReSourcer</h1>
          </body>
          </html>
          EOF
          echo "‚úÖ Created dist/index.html"
          ls -la dist/

      - name: Install npm dependencies
        working-directory: tray
        run: npm install

      - name: Build Tauri app
        working-directory: tray
        run: npm run build

      - name: Upload Tauri artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.tauri_artifact }}-dmg
          path: tray/src-tauri/target/release/bundle/dmg/*.dmg
          retention-days: 7

      - name: Upload Tauri artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.tauri_artifact }}-deb
          path: tray/src-tauri/target/release/bundle/deb/*.deb
          retention-days: 7

      - name: Upload Tauri artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.tauri_artifact }}-msi
          path: tray/src-tauri/target/release/bundle/msi/*.msi
          retention-days: 7

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          cache: true

      - name: Install Android SDK components
        run: |
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install "ndk;27.0.12077973" "platforms;android-36" "build-tools;36.0.0"

      - name: Flutter doctor
        working-directory: app/flutter
        run: flutter doctor -v

      - name: Get Flutter dependencies
        working-directory: app/flutter
        run: flutter pub get

      - name: Build Android APK (Release with debug signing)
        working-directory: app/flutter
        run: flutter build apk --release

      - name: Verify and rename APK
        run: |
          APK_DIR="app/flutter/build/app/outputs/flutter-apk"
          TARGET_APK="$APK_DIR/resourcer-android.apk"

          if [ -f "$TARGET_APK" ]; then
            echo "‚úÖ Found APK: $TARGET_APK"
          elif [ -f "$APK_DIR/app-release.apk" ]; then
            echo "‚úÖ Found APK: $APK_DIR/app-release.apk"
            mv "$APK_DIR/app-release.apk" "$TARGET_APK"
            echo "‚úÖ Renamed to: $TARGET_APK"
          else
            echo "‚ùå APK not found"
            ls -la "$APK_DIR" || echo "Directory does not exist"
            exit 1
          fi

          echo "APK size: $(du -h $TARGET_APK | cut -f1)"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: resourcer-android
          path: app/flutter/build/app/outputs/flutter-apk/resourcer-android.apk
          retention-days: 7

# TAGËß¶Âèë
  create-release:
    name: Create GitHub Release
    needs: [build, build-tauri, build-android]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifacts
        run: |
          echo "üì¶ All artifacts:"
          find artifacts -type f -exec ls -lh {} \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: true  # ‰øùÂ≠òÂà∞ËçâÁ®ø
          prerelease: false
          generate_release_notes: true  # Ëá™Âä®ÁîüÊàê
          body: |
            ### CLI ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑
            - `re-sourcer-linux-x86_64` - Linux x86_64
            - `re-sourcer-macos-aarch64` - macOS Apple Silicon
            - `re-sourcer-windows-x86_64.exe` - Windows x86_64

            ### Tauri Ê°åÈù¢Â∫îÁî®ÔºàÁ≥ªÁªüÊâòÁõòÔºâ
            - `resourcer-tray-macos` - macOS (.dmg)
            - `resourcer-tray-linux` - Linux (.deb)
            - `resourcer-tray-windows` - Windows (.msi)

            ### Android Â∫îÁî®
            - `resourcer-android.apk` - Android APK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
