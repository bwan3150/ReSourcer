name: Build Release

on:
  workflow_dispatch:  # GitHub Action页面手动触发
  push:
    tags:
      - 'v*.*.*'  # TAG时触发, git tag v0.2.1; git push origin v0.2.1

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ytdlp: bin/yt-dlp-linux
            artifact_name: re-sourcer-linux-x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            ytdlp: bin/yt-dlp-macos
            artifact_name: re-sourcer-macos-aarch64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ytdlp: bin/yt-dlp-windows.exe
            artifact_name: re-sourcer-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Verify yt-dlp binary exists
        shell: bash
        run: |
          if [ ! -f "${{ matrix.platform.ytdlp }}" ]; then
            echo "❌ yt-dlp binary not found: ${{ matrix.platform.ytdlp }}"
            exit 1
          fi
          echo "✅ Found yt-dlp binary: ${{ matrix.platform.ytdlp }}"

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Rename binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mv target/${{ matrix.platform.target }}/release/re-sourcer ${{ matrix.platform.artifact_name }}
          chmod +x ${{ matrix.platform.artifact_name }}

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        run: |
          mv target/${{ matrix.platform.target }}/release/re-sourcer.exe ${{ matrix.platform.artifact_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: ${{ matrix.platform.artifact_name }}
          retention-days: 7

  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          cache: true

      - name: Install Android SDK components
        run: |
          sdkmanager --install "ndk;27.0.12077973" "platforms;android-36" "build-tools;36.0.0"

      - name: Flutter doctor
        working-directory: app/flutter
        run: flutter doctor -v

      - name: Get Flutter dependencies
        working-directory: app/flutter
        run: flutter pub get

      - name: Build Android APK (Release with debug signing)
        working-directory: app/flutter
        run: flutter build apk --release

      - name: Verify and rename APK
        run: |
          APK_PATH="app/flutter/build/app/outputs/flutter-apk/resourcer-android.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK not found at $APK_PATH"
            ls -la app/flutter/build/app/outputs/flutter-apk/ || echo "Directory does not exist"
            exit 1
          fi
          echo "✅ APK found: $APK_PATH"
          echo "APK size: $(du -h $APK_PATH | cut -f1)"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: resourcer-android
          path: app/flutter/build/app/outputs/flutter-apk/resourcer-android.apk
          retention-days: 7

# TAG触发
  create-release:
    name: Create GitHub Release
    needs: [build, build-android]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: true  # 保存到草稿
          prerelease: false
          generate_release_notes: true  # 自动生成
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
